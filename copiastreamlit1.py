import streamlit
import streamlit  as st
import pandas as pd
import seaborn as sns
import numpy as np
import os
import sys

from narwhals.selectors import categorical
#import tkinter as tk
from statsmodels.stats.multicomp import MultiComparison
import math

import matplotlib.pyplot as plt
from bleach import clean
import statsmodels.api as sm
import statsmodels.formula.api as smf
from scipy.optimize import anderson
from scipy.stats import shapiro, levene
from scipy.stats import anderson
from scipy import stats
from statsmodels.stats.anova import anova_lm
from statsmodels.stats.multicomp import pairwise_tukeyhsd
from streamlit import selectbox
from statsmodels.stats.diagnostic import acorr_ljungbox






st.set_page_config(
    page_title="ANOVA App",
    page_icon="ðŸ§ ",
    layout="centered",
)
st.video(
    "corvo.mp4",
    format="video/mp4",
    start_time=0,loop=True, autoplay=True, muted=False, subtitles=None
    # streamlit nÃ£o tem parÃ¢metro de loop ou tamanho direto no st.video()
)

st.write('**AnÃ¡lise consciente de dados**')
st.write('Email: jose.g.oliveira@ufv.br')








tab1, tab2, tab3 = st.tabs(["PrÃ©-processamento e AnÃ¡lise descritiva", "GrÃ¡ficos", "Pressupostos-ANOVA/ANOVA/Post-hoc teste "])

with tab1:
    st.title("Aplicativo anova")
    st.write("O objetivo Ã© fazer uma **Anova** com no mÃ¡ximo 2 fatores .")
    meu_label = "Envie seu arquivo CSV"
    arquivo = st.file_uploader(meu_label, type="csv")# criopu um upload
    #data = pd.read_csv(arquivo, encoding='UTF-8', sep=';')# data em dataFrame
    modelo = st.radio('VocÃª deseja ver o modelo de entrada da tabela?', ['Sim', 'NÃ£o '])
    if modelo == 'Sim':
        st.image("organizacao_tabela.png", caption="Modelo de tabela", width=300)
        st.subheader('ConfiguraÃ§Ã£o da **Planilha** ')
        st.warning('CÃ©lulas vazias devem ser preenchidas com **NA**')
        st.warning('Evitar colocar **pontuaÃ§Ãµes** nos nomes das **variÃ¡veis**')
        st.warning('Evitar colocar **pontuaÃ§Ãµes**  nos *nÃ­veis* das variÃ¡veis')
        st.warning('Seguir o modelo de preenchimento da **planilha** acima')
        st.warning('Os eventos sÃ£o **dependentes**, entÃ£o nÃ£o esqueÃ§a de   **sim**  em cada etapa')

    if arquivo is  None:
        st.warning('Aguardando a escolha dos dados ')

    else:
        st.success(f"O arquivo selecionado foi: {arquivo.name}")

        data = pd.read_csv(arquivo, encoding='UTF-8', sep=';')
        data_copia = data.copy

        escolha = st.radio("VocÃª deseja ver seus dados ?", ["Sim", "NÃ£o"]).upper().strip()
        if escolha == 'SIM':
            st.dataframe(data)

        variavel = st.radio('Quantas variÃ¡veis categÃ³ricas vocÃª deseja analisar?', [1,2], horizontal = True)

        data1 = data.to_dict()
        chaves = data1.keys()
        chaves1 = list(chaves)


        escolhas = []
        if variavel == 1:
            categorica= st.selectbox('Escolha as variÃ¡vel categÃ³rica',['Selecione']+ chaves1, key = '1')
            if categorica != 'Selecione':
                st.success(f"VocÃª escolheu a variÃ¡vel categÃ³rica: {categorica}") # escolha essa primeiro

            continua = st.selectbox('Escolha a variÃ¡vel contÃ­nua',['Selecione'] + chaves1, key = '2')
            if continua != 'Selecione': #Escolha essa depois que a primeira Ã© escolhida
                st.success(f"VocÃª escolheu a variÃ¡vel contÃ­nua: {continua}")

                if categorica != 'Selecione' and continua != 'Selecione':
                    escolhas.append(categorica)
                    escolhas.append(continua)
                    data = data[escolhas]# escolhi e armazenei as variÃ¡veis que quero trabalhar
                    st.write(data)

                    data_na = data.isna().sum()
                    #fazer uma funÃ§Ã£o aqui! def retirarana(data na , data) e chamo novamente em outro lugar
                    if data_na.sum() == 0:
                        st.write(f'VocÃª NÃ£o tem **NA** nas  variÃ¡veis de seus dados  ')
                        st.dataframe(data_na)
                    else:
                        st.write(f'VocÃª  tem **NA** nas  variÃ¡veis de seus dados  ')
                        st.dataframe(data_na)
                        st.write('VocÃª gostaria de retira  as **NAs** ou substituir por valores mÃ©dios?')
                        escolha_2 = st.radio("VocÃª deseja ?", ["Substituir por Valores mÃ©dios", "Retirar Na"])
                        if escolha_2 == "Substituir por Valores mÃ©dios":
                            data = data.fillna(data.median(numeric_only=True))
                            st.write('Dados com valores mÃ©dios substituidos no lugar de NA')
                            st.dataframe(data)
                        else:
                            data = data.dropna(axis=1)
                            st.dataframe(data)  # manter o mes


                    #somente se essa condiÃ§Ã£o for respeitada, entÃ£o fazemos a anpalise
                    data_grouped = data.groupby(categorica)[continua].describe()
                    st.write(f"AnÃ¡lise descritiva da variÃ¡vel {continua}")
                    st.dataframe(data_grouped)
                    cv = data.loc[:,continua].values# transforma em array numpy  e pega os valores, para o cÃ¡lculo
                    #st.write(cv)
                    #cÃ¡lculo do cv
                    cv2 =  np.std(cv) / np.mean(cv) * 100
                    st.write(f"CV% = {cv2}")

                    st.subheader('Z-score ')
                    zscore = (data[continua] - np.mean(data[continua])) / np.std(data[continua])
                    data2 = data.copy()
                    data2['zscore'] = zscore
                    st.write(data2)
                    # print(zscore)

                    #plotar a curva de KDE
                    fig2, ax = plt.subplots()
                    sns.kdeplot(data=data2, x='zscore', fill=True, alpha=0.3)
                    ax.set_title("Curva de KDE para visualizaÃ§Ã£o de normalidade ")
                    plt.axvline(0, color='red', linestyle='dashed', linewidth=1)  # Linha central em 0
                    #sns.stripplot(x=zscore, color='black', jitter=True, alpha=0.5, ax=ax)
                    st.pyplot(fig2)


                    # Plotar o boxplot dos z-scores
                    fig, ax = plt.subplots()
                    sns.boxplot(x=zscore, ax=ax)
                    sns.stripplot(x=zscore, color='black', jitter=True, alpha=0.5, ax=ax)
                    ax.set_title("Boxplot dos Z-Scores")
                    st.pyplot(fig)



                    #cÃ¡lculo de outliers:
                    st.subheader('Outlier ')
                    st.write('O cÃ¡lculo de outlier consiste em identificar os dados que estÃ£o acima ou abaixo  de 3 desvios padrÃ£o do Z-score e utiliza-se o mÃ©todo do IQR')


                    Q1 = data.loc[:, continua].quantile(0.25)
                    Q3 = data.loc[:, continua].quantile(0.75)
                    # print(Q1)
                    # print(Q3)

                    IQR = Q3 - Q1
                    LS = Q3 + 1.5 * IQR
                    LI = Q1 - 1.5 * IQR
                    print()
                    linha = 70 * '='
                    print(linha)

                    print(linha)


                    #Outliers acima e abaixo:
                    st.write('Limite superior = ', LS)
                    acima = data[(data.loc[:, continua ] > LS)]
                    if acima.empty : # Usa-se empty, porque estamos tratando de um dataframe
                        st.write('VocÃª nÃ£o tem outliers acima do limite superior  ')
                        st.write(acima)
                    else:
                        st.write('VocÃª tem alguns outliers acima do limite superior')
                        st.write(acima)








                    st.write("limite inferior = ", LI)
                    abaixo = data[(data.loc[:, continua] < LI)]
                    if abaixo.empty : # Usa-se empty, porque estamos tratando de um dataframe
                        st.write('VocÃª nÃ£o tem outliers abaixo do limite inferior  ')
                        st.write(abaixo)
                    else:
                        st.write('VocÃª tem alguns outliers abaixo  do limite inferior')
                        st.write(abaixo)

                    escolha_3 = st.radio("VocÃª deseja retirar os outliers ?", ["SIM", "NÃ£o "], horizontal=True)
                    if escolha_3 == 'SIM':
                        data = data[(data[continua] < LS) & (data[continua]>LI)]
                        st.success('os outliers foram tirados com sucesso ')
                        escolha_4 = st.radio("VocÃª gostaria de ver os dados sem outliers?", ['Sim', 'NÃ£o'])
                        if escolha_4 == 'Sim':
                            st.write('Seus dados sem outliers')
                            st.dataframe(data)
                        escolha_5 = st.radio('VocÃª deseja ver os grÃ¡ficos boxplot e KDE', ['Sim', 'NÃ£o'], horizontal=True)
                        if escolha_5 == 'Sim':
                            st.subheader('Z-score ')
                            zscore = (data[continua] - np.mean(data[continua])) / np.std(data[continua])
                            data['zscore'] = zscore

                            # plotar a curva de KDE
                            fig2, ax = plt.subplots()
                            sns.kdeplot(data=data, x='zscore', fill=True, alpha=0.3)
                            ax.set_title("Curva de KDE para visualizaÃ§Ã£o de normalidade ")
                            plt.axvline(0, color='red', linestyle='dashed', linewidth=1)  # Linha central em 0
                            # sns.stripplot(x=zscore, color='black', jitter=True, alpha=0.5, ax=ax)
                            st.pyplot(fig2)

                            st.dataframe(data)
                            # Plotar o boxplot dos z-scores
                            fig, ax = plt.subplots()
                            sns.boxplot(x=zscore, ax=ax)
                            sns.stripplot(x=zscore, color='black', jitter=True, alpha=0.5, ax=ax)
                            ax.set_title("Boxplot dos Z-Scores")
                            st.pyplot(fig)


                    st.write('AnÃ¡lise descritiva dos seus dados ')
                    data_grouped = data.groupby(categorica)[continua].describe()
                    st.dataframe(data_grouped)
                    cv = data.loc[:, continua].values  # transforma em array numpy  e pega os valores, para o cÃ¡lculo
                    # st.write(cv)
                    # cÃ¡lculo do cv
                    cv2 = np.std(cv) / np.mean(cv) * 100
                    st.write(f"CV% = {cv2}")
                    st.warning('Se quiser continuar a anÃ¡lise, entÃ£o clica na aba 2 acima **Pressupostos da Anova**')






                with tab2:
                    st.header('AnÃ¡lise exploratÃ³ria')
                    st.subheader('GrÃ¡fico boxplot')

                    Eixo_y = data.columns[1]
                    print(Eixo_y)
                    Axis_x = data.columns[0]



                    # colocando grÃ¡fico um ao lado do outro
                    col1, col2 = st.columns(2)

                    with tab2:
                        st.header('AnÃ¡lise exploratÃ³ria')
                        st.subheader('GrÃ¡fico boxplot')



                        # colocando grÃ¡fico um ao lado do outro
                        col1, col2 = st.columns(2)

                        with col1:
                            fig, ax = plt.subplots(figsize=(10, 6))
                            sns.boxplot(x=Axis_x, y=Eixo_y,  palette="Set2", data=data, ax=ax)
                            sns.despine(offset=10, trim=True)
                            st.pyplot(fig)

                        with col2:
                            st.subheader('GrÃ¡fico de barras')
                            fig3, ax = plt.subplots(figsize=(10, 6))
                            sns.barplot(x=Axis_x, y=Eixo_y,  palette="Set2", errorbar='sd', width=0.5,
                                        data=data, ax=ax)
                            plt.ylim(0)
                            # sns.despine(offset=10, trim=True)
                            st.pyplot(fig3)

                        escolha_6 = st.radio('VocÃª gostaria de alterar os grÃ¡ficos?', ['Sim', 'NÃ£o '])
                        if escolha_6 == 'Sim':

                            escolha_7 = st.radio(f"VocÃª gostaria de alterar o nÃ­vel da variÃ¡vel categÃ³rica: {categorica}?",
                                                 ['Sim', 'NÃ£o'])

                            if escolha_7 == 'Sim':
                                data_grouped = data[categorica].unique()
                                lista = list(data_grouped)
                                tamanho = len(lista)
                                ordem_desejada = []
                                for k in range(tamanho):
                                    selecionado = st.selectbox(f'Escolha a ordem do nÃ­vel {1+k} ', ['Selecione'] + lista,
                                                         key=f'ordem_{1+k}')
                                    ordem_desejada.append(selecionado )

                                    # Verifica se todos os nÃ­veis foram selecionados corretamente
                                    if 'Selecione' not in ordem_desejada and len(set(ordem_desejada)) == len(lista):
                                        nome_eixo_y = st.text_input("Digite o nome que vocÃª quer para o eixo Y:",
                                                                    value=Eixo_y)
                                        nome_eixo_x = st.text_input("Digite o nome que vocÃª quer para o eixo X:",
                                                                    value=Axis_x)
                                        # Criar um slider somente para valores mÃ¡ximos:
                                        max_valor = data[continua].max()
                                        valor_inicial = max_valor  # arredonda para o prÃ³ximo inteiro

                                        ymax = st.number_input(
                                            label="Valor mÃ¡ximo do eixo Y (escala)",
                                            min_value=0.00,
                                            max_value=1000000.00,
                                            value=valor_inicial,
                                            step=0.01
                                        )

                                        font_opcao = ["serif",  "sans-serif",   "monospace",   "Arial", "Helvetica","Verdana" ,"Tahoma", "Calibri","DejaVu Sans","Geneva","Roboto","Times New Roman","Georgia","Garamond","Cambria","DejaVu Serif",
    "Computer Modern"]

                                        font1 = st.selectbox('Escolha a fonte dos eixos e rÃ³tulos', font_opcao, key = '87')

                                        options = ["Blues", "BuGn", "Set1", "Set2", "Set3", "viridis", "magma", "Pastel1",
                                                   "Pastel2", "colorblind", "Accent", "tab10", "tab20", "tab20b", 'tab20c',
                                                   "Paired"]

                                        cor_padrÃ£o = "Set2"
                                        cores = st.selectbox('Escolha a cor de interesse:', ['Cores'] + options, index=0)
                                        st.success(f"VocÃª escolheu: {cores}.")
                                        if not cores:
                                            cores = 'Set2'
                                        if cores == 'Cores':
                                            cores = cor_padrÃ£o

                                        # Criar um slider somente para valores mÃ¡ximos:
                                        max_valor = data[continua].max()
                                        valor_inicial = max_valor  # arredonda para o prÃ³ximo inteiro



                                        st.header('GrÃ¡fico boxplot')
                                        fig23, ax = plt.subplots(figsize=(10, 6))
                                        sns.boxplot(x=Axis_x, y=Eixo_y, order=ordem_desejada,
                                                    palette=cores, data=data, ax=ax)
                                        ax.set_ylabel(nome_eixo_y, fontsize=14, weight='bold')
                                        ax.set_xlabel(nome_eixo_x, fontsize=14, weight='bold')
                                        sns.despine(offset=10, trim=True)

                                        st.pyplot(fig23)

                                        # Salvar a figura em um arquivo PNG
                                        fig23.savefig(f"GrÃ¡fico de interaÃ§Ã£o {categorica} e {continua}.png", dpi=300,
                                                    bbox_inches='tight')  # Salva a figura como .png

                                        # Cria um botÃ£o para download
                                        with open(f"GrÃ¡fico de interaÃ§Ã£o {categorica} e {continua}.png", "rb") as f:
                                            st.download_button(
                                                label="Baixar o grÃ¡fico",  # Nome do botÃ£o
                                                data=f,  # Dados do arquivo
                                                file_name=f"GrÃ¡fico de interaÃ§Ã£o {categorica} e {continua}.png",
                                                # Nome do arquivo a ser baixado
                                                mime="image/png"  # Tipo MIME do arquiv
                                            )

                                        st.subheader('GrÃ¡fico de barras')
                                        fig3, ax = plt.subplots(figsize=(10, 6))
                                        sns.barplot(x=Axis_x, y=Eixo_y,  order=ordem_desejada, palette=cores,
                                                    errorbar='sd',
                                                    width=0.5,linewidth = 1, edgecolor = 'black', data=data, ax=ax)
                                        ax.set_ylabel(nome_eixo_y, fontsize=14, weight='bold')
                                        ax.set_xlabel(nome_eixo_x, fontsize=14, weight='bold')
                                        ax.set_ylim(0, ymax)#ax.spines['left'].set_linewidth(3)
                                        ax.set_ylim(0, ymax)  # ax.spines['left'].set_linewidth(3)
                                        cor = 'black'
                                        tom = 'bold'
                                        # Modificar as espinhas inferior e esquerda, colorindo-as
                                        # Esconder as espinhas superior e direita
                                        ax.spines['top'].set_visible(False)
                                        ax.spines['right'].set_visible(False)

                                        ax.spines['bottom'].set_linewidth(1)
                                        ax.spines['bottom'].set_color('black')
                                        ax.spines['left'].set_linewidth(1)
                                        ax.spines['left'].set_color('black')
                                        ax.tick_params(axis='y', labelsize=17, colors=cor)#tamanho dos nÃºmeros
                                        ax.set_xticklabels(ax.get_xticklabels(), fontsize=18, fontweight='bold',
                                                           fontfamily=font1 )#tamangho das letras do rÃ³tulo
                                        ax.set_ylabel(nome_eixo_y, fontsize=18, weight='bold', family=font1 )#tamanho dos nomes das variÃ¡veis y
                                        ax.set_xlabel(nome_eixo_x, fontsize
                                        =18, weight='bold', family=font1 )#tamanho dos nomes das variÃ¡veis x

                                        # sns.despine(offset=10, trim=True)
                                        st.pyplot(fig3)

                                        # Salvar a figura em um arquivo PNG
                                        fig3.savefig(f"GrÃ¡fico de interaÃ§Ã£o {categorica} e {continua}_barplot.png", dpi=300,
                                                      bbox_inches='tight')  # Salva a figura como .png

                                        # Cria um botÃ£o para download
                                        with open(f"GrÃ¡fico de interaÃ§Ã£o {categorica} e {continua}_barplot.png", "rb") as f:
                                            st.download_button(
                                                label="Baixar o grÃ¡fico",  # Nome do botÃ£o
                                                data=f,  # Dados do arquivo
                                                file_name=f"GrÃ¡fico de interaÃ§Ã£o {categorica} e {continua}_barplot.png",
                                                # Nome do arquivo a ser baixado
                                                mime="image/png"  # Tipo MIME do arquiv
                                            )

                                        data_grouped2 = data.groupby(categorica)[continua].describe().reset_index()
                                        st.dataframe(data_grouped2)




                with tab3:

                    st.header(f"Pressupostos da ANOVA ")
                    st.success(f'Modelo completo: {continua}~{categorica}')
                    st.success(f"ParÃ¢metro: {continua}")
                    st.subheader('Teste de normalidade de Shapiro Wilk')
                    st.write('H0: Os resÃ­duos seguem uma distribuiÃ§Ã£o normal ')
                    st.write('Se P < 0.05, entÃ£o rejeita H0 : O resÃ­duos nÃ£o segue uma distribuiÃ§Ã£o normal ')
                    formula = f'{continua}~{categorica}'
                    # print(formula)
                    # modelo
                    model = smf.ols(formula, data=data).fit()
                    df_resid = data.copy()
                    df_resid['Residuos2'] = model.resid
                    stat, p_valor = shapiro(df_resid['Residuos2'])
                    if p_valor > 0.05:
                        reject = 'NÃ£o rejeita a H0'
                        decisao = 'Os resÃ­duos  seguem uma distribuiÃ§Ã£o  normal '
                        st.success(f' P-valor =  {p_valor}')
                        st.success(f'DecisÃ£o {reject}')
                        st.success(decisao)
                    else:
                        reject = 'Rejeita H0 '
                        decisao = 'Os resÃ­duos nÃ£o  seguem uma distribuiÃ§Ã£o  normal '
                        st.success(f' P-valor =  {p_valor}')
                        st.success(f'DecisÃ£o {reject}')
                        st.success(decisao)
                    st.subheader('Curva de distribuiÃ§Ã£o KDE')
                    # plotar a curva de KDE
                    fig5, ax = plt.subplots()
                    sns.kdeplot(data=df_resid, x='Residuos2', fill=True, alpha=0.3)
                    ax.set_title(f"Curva de KDE para visualizaÃ§Ã£o de normalidade do modelo {categorica}-{continua}")
                    plt.axvline(0, color='red', linestyle='dashed', linewidth=1)  # Linha central em 0
                    # sns.stripplot(x=zscore, color='black', jitter=True, alpha=0.5, ax=ax)
                    st.pyplot(fig5)

                    # Anderson Darling test
                    # Teste de normalidade de Anderson darling

                    st.header("Teste de Normalidade dos resÃ­duos ")
                    st.subheader('Anderson Darling ')
                    st.write(f'H0: Os resÃ­duos do modelo: {categorica}-{continua} seguem distribuiÃ§Ã£o normal ')
                    st.write('H0: Se valor crÃ­tico > valor estatÃ­stico, entÃ£o nÃ£o rejeita H0')
                    test = anderson(df_resid['Residuos2'], dist='norm')
                    critical_value = test.critical_values[2]  # O valor crÃ­tico para o nÃ­vel de 5%

                    if test.statistic > critical_value:
                        reject2 = 'Rejeita H0'
                        resultado = "Os resÃ­duos nÃ£o seguem uma distribuiÃ§Ã£o normal "
                    else:
                        reject2 = 'NÃ£o rejeita H0'
                        resultado = 'Os resÃ­duos seguem uma distribuiÃ§Ã£o normal '

                    # Exibindo os resultados
                    print(linha)
                    st.success(f' Valor crÃ­tico: {critical_value} ')
                    st.success(f'EstatÃ­stica do teste:  {test.statistic}')
                    st.success(reject2)
                    st.success(resultado)

                    # Homogneidade da variÃ¢ncia:
                    st.header('Homogeneidade de variÃ¢ncia')
                    st.subheader("Teste de levene")
                    st.write('H0: A variÃ£ncia dos grupos comparados sÃ£o iguais a um nÃ­vel de significÃ¢ncia de 5%')
                    st.write('Se p-valor <0.05, entÃ£o rejeita H0 e os resÃ­duos nÃ£o seguem distribuiÃ§Ã£o normal')
                    agrupamento = df_resid.groupby(categorica)
                    grupo = []
                    for nome, dados_grupo in agrupamento:
                        # print(dados_grupo['Residuos'].values)
                        grupo.append(dados_grupo['Residuos2'].values)
                        # print(x)
                    stat, p_value = stats.levene(*grupo)
                    if p_value < 0.05:
                        reject = 'Rejeita a H0'
                        homoge_neo = 'nÃ£o sÃ£o '
                        resposta = 'Os resÃ­duos nÃ£o seguem uma distribuiÃ§Ã£o normal'
                    else:
                        reject = 'NÃ£o rejeita H0'
                        homoge_neo = 'sÃ£o '
                        resposta = 'Os resÃ­duos seguem uma distribuiÃ§Ã£o normal '
                    st.success(
                        f' P-valor :  {p_value}')
                    st.success(f"A variÃ¢ncia dos nÃ­veis comparados {homoge_neo} homogÃªneos")
                    st.success(f'DecisÃ£o:  {reject} ')
                    st.success(resposta)

                    # teste de barlett
                    st.subheader('Teste de barlett para homogeneidade de variÃ¢ncia')
                    st.write('H0: A variÃ£ncia dos grupos comparados sÃ£o iguais a um nÃ­vel de significÃ¢ncia de 5%')
                    st.write('Se p-valor <0.05, entÃ£o rejeita H0 e os resÃ­duos nÃ£o seguem distribuiÃ§Ã£o normal')
                    stat, p = stats.bartlett(*grupo)
                    if p_value < 0.05:
                        reject = 'Rejeita a H0'
                        homoge_neo = 'nÃ£o sÃ£o '
                        decisao = 'Os resÃ­duos nÃ£o sÃ£o homogÃªnos(iguais)'
                    else:
                        reject = 'NÃ£o rejeita H0'
                        homoge_neo = 'sÃ£o '
                        decisao = ' As variÃ¢ncias dos resÃ­duos sÃ£o homogÃªneos '

                    st.success(f'P-valor :  {p_value}')
                    st.success(f'a variÃ¢ncia dos nÃ­veis comparados {homoge_neo} homogÃªneos')
                    st.success(reject)
                    st.success(decisao)

                    st.subheader('IndependÃªncia dos resÃ­duos:')
                    st.write('H0: Os resÃ­duos nÃ£o sÃ£o independentes(NÃ£o hÃ¡ autocorrelaÃ§Ã£o)')
                    st.write('HA: Os resÃ­duos sÃ£o dependentes(HÃ¡ correlaÃ§Ã£o)')
                    st.write('Alfa = 0.05')
                    # Teste de Ljung-Box
                    lb_test = acorr_ljungbox(model.resid, lags=[1],
                                             return_df=True)  # lags=[1] testa apenas para defasagem 1

                    st.dataframe(lb_test)
                    p_valor = lb_test['lb_pvalue'].values[0]

                    if p_valor >=0.05:
                        st.success('Os resÃ­duos nÃ£o sÃ£o independentes (NÃ£o hÃ¡ autocorrelaÃ§Ã£o')
                    else:
                        st.warning('Os resÃ­duos sÃ£o dependentes (HÃ¡ alta correlaÃ§Ã£o')




                    st.header('ANOVA')
                    model = smf.ols(formula, data=data).fit()
                    anova_table = anova_lm(model)
                    st.dataframe(anova_table)
                    st.write(f"R squared adjusted: {model.rsquared_adj}")
                    data_grouped2 = data.groupby(categorica)[continua].mean().reset_index()
                    st.dataframe(data_grouped2)

                    p_value = anova_table['PR(>F)'][0]



                    if p_value < 0.05:
                        st.subheader(f'AnÃ¡lise de tukey para  X: {categorica} e y: {continua}')

                        categorico1 = pd.Categorical(data.iloc[:, 0]
                                                     )  # transformando a primeira coluna em categÃ³rica

                        mc = MultiComparison(data.iloc[:, 1], categorico1)
                        tukey_test1 = mc.tukeyhsd(alpha=0.05)
                        st.dataframe(tukey_test1.summary())
                    else:
                        st.warning(f' Seu p-valor {p_value} nÃ£o foi significativo')
                        st.warning('EntÃ£o nÃ£o Ã© feito o teste de tukey ')

            #boxplot:
                    # padronizaÃ§Ã£o dos dados:



        escolhas = []
        if variavel == 2:
            categorica= st.selectbox('Escolha a primeira variÃ¡vel  categÃ³rica',['Selecione'] + chaves1, key = '3')
            if categorica != 'Selecione':
                st.success(f"VocÃª escolheu a variÃ¡vel categÃ³rica: {categorica}")

            categorica_2 = st.selectbox('Escolha a segunda variÃ¡vel  categÃ³rica',['Selecione'] +chaves1, key = '4')
            if categorica_2 != 'Selecione':
                st.success(f"VocÃª escolheu a variÃ¡vel categÃ³rica: {categorica_2}")

            continua= st.selectbox('Escolha a variÃ¡vel contÃ­nua',['Selecione'] +chaves1, key = '5')
            if continua != 'Selecione':
                st.success(f"VocÃª escolheu a variÃ¡vel contÃ­nua: {continua}")

                escolhas.append(categorica)
                escolhas.append(categorica_2)
                escolhas.append(continua)

                data = data[escolhas]  # escolhi e armazenei as variÃ¡veis que quero trabalhar
                st.write(data)
                data_na = data.isna().sum()
                # fazer uma funÃ§Ã£o aqui! def retirarana(data na , data) e chamo novamente em outro lugar
                if data_na.sum() == 0:
                    st.write(f'VocÃª NÃ£o tem **NA** nas  variÃ¡veis de seus dados  ')
                    st.dataframe(data_na)
                else:
                    st.write(f'VocÃª  tem **NA** nas  variÃ¡veis de seus dados  ')
                    st.dataframe(data_na)
                    st.write('VocÃª gostaria de retirar  as **NAs** ou substituir por valores mÃ©dios?')
                    escolha_2 = st.radio("VocÃª deseja ?", ["Substituir por Valores mÃ©dios", "Retirar Na"])
                    if escolha_2 == "Substituir por Valores mÃ©dios":
                        data = data.fillna(data.median(numeric_only=True))
                        st.write('Dados com valores mÃ©dios substituidos no lugar de NA')
                        st.dataframe(data)
                    else:
                        data = data.dropna(axis=1)
                        st.dataframe(data)  # manter o mes

            if categorica !='Selecione' and categorica_2 != 'Selecione' and continua!= 'Selecione':
                cv = data.loc[:, continua].values  # transforma em array numpy  e pega os valores, para o cÃ¡lculo
                # cÃ¡lculo do cv
                st.write('AnÃ¡lise descritiva dos seus dados ')
                data_grouped = data.groupby(data.columns[0:variavel].tolist()).describe()
                st.dataframe(data_grouped)
                cv2 = np.std(cv) / np.mean(cv) * 100
                st.write(f"CV% = {cv2}")

                st.subheader('Z-score ')
                zscore = (data[continua] - np.mean(data[continua])) / np.std(data[continua])
                data2 = data.copy()
                data2['zscore'] = zscore
                st.write(data2)
                # print(zscore)

                # plotar a curva de KDE
                fig2, ax = plt.subplots()
                sns.kdeplot(data=data2, x='zscore', fill=True, alpha=0.3)
                ax.set_title("Curva de KDE para visualizaÃ§Ã£o de normalidade ")
                plt.axvline(0, color='red', linestyle='dashed', linewidth=1)  # Linha central em 0
                # sns.stripplot(x=zscore, color='black', jitter=True, alpha=0.5, ax=ax)
                st.pyplot(fig2)

                # Plotar o boxplot dos z-scores
                fig, ax = plt.subplots()
                sns.boxplot(x=zscore, ax=ax)
                sns.stripplot(x=zscore, color='black', jitter=True, alpha=0.5, ax=ax)
                ax.set_title("Boxplot dos Z-Scores")
                st.pyplot(fig)

                # cÃ¡lculo de outliers:
                st.subheader('Outlier ')
                st.write(
                    'O cÃ¡lculo de outlier consiste em identificar os dados que estÃ£o acima ou abaixo  de 3 desvios padrÃ£o do Z-score e utiliza-se o mÃ©todo do IQR')

                Q1 = data.loc[:, continua].quantile(0.25)
                Q3 = data.loc[:, continua].quantile(0.75)
                # print(Q1)
                # print(Q3)

                IQR = Q3 - Q1
                LS = Q3 + 1.5 * IQR
                LI = Q1 - 1.5 * IQR
                print()
                linha = 70 * '='
                print(linha)

                print(linha)

                # Outliers acima e abaixo:
                st.write('Limite superior = ', LS)
                acima = data[(data.loc[:, continua] > LS)]
                if acima.empty:  # Usa-se empty, porque estamos tratando de um dataframe
                    st.write('VocÃª nÃ£o tem outliers acima do limite superior  ')
                    st.write(acima)
                else:
                    st.write('VocÃª tem alguns outliers acima do limite superior')
                    st.write(acima)

                st.write("limite inferior = ", LI)
                abaixo = data[(data.loc[:, continua] < LI)]
                if abaixo.empty:  # Usa-se empty, porque estamos tratando de um dataframe
                    st.write('VocÃª nÃ£o tem outliers abaixo do limite inferior  ')
                    st.write(abaixo)
                else:
                    st.write('VocÃª tem alguns outliers abaixo  do limite inferior')
                    st.write(abaixo)

                escolha_3 = st.radio("VocÃª deseja retirar os outliers ?", ["SIM", "NÃ£o "], horizontal=True)
                if escolha_3 == 'SIM':
                    data = data[(data[continua] < LS) & (data[continua] > LI)]
                    st.success('os outliers foram tirados com sucesso ')
                    escolha_4 = st.radio("VocÃª gostaria de ver os dados sem outliers?", ['Sim', 'NÃ£o'])
                    if escolha_4 == 'Sim':
                        st.write('Seus dados sem outliers')
                        st.dataframe(data)
                    escolha_5 = st.radio('VocÃª deseja ver os grÃ¡ficos boxplot e KDE', ['Sim', 'NÃ£o'], horizontal=True)
                    if escolha_5 == 'Sim':
                        st.subheader('Z-score ')
                        zscore = (data[continua] - np.mean(data[continua])) / np.std(data[continua])
                        data['zscore'] = zscore

                        # plotar a curva de KDE
                        fig2, ax = plt.subplots()
                        sns.kdeplot(data= data, x='zscore', fill=True, alpha=0.3)
                        ax.set_title("Curva de KDE para visualizaÃ§Ã£o de normalidade ")
                        plt.axvline(0, color='red', linestyle='dashed', linewidth=1)  # Linha central em 0
                        # sns.stripplot(x=zscore, color='black', jitter=True, alpha=0.5, ax=ax)
                        st.pyplot(fig2)

                        st.dataframe(data)
                        # Plotar o boxplot dos z-scores
                        fig, ax = plt.subplots()
                        sns.boxplot(x=zscore, ax=ax)
                        sns.stripplot(x=zscore, color='black', jitter=True, alpha=0.5, ax=ax)
                        ax.set_title("Boxplot dos Z-Scores")
                        st.pyplot(fig)

                        st.write('AnÃ¡lise descritiva dos seus dados ')
                        data_grouped = data.groupby(data.columns[0:variavel].tolist()).describe()
                        st.dataframe(data_grouped)
                        cv = data.loc[:, continua].values  # transforma em array numpy  e pega os valores, para o cÃ¡lculo
                        # st.write(cv)
                        # cÃ¡lculo do cv
                        cv2 = np.std(cv) / np.mean(cv) * 100
                        st.write(f"CV% = {cv2}")

                        with tab2:
                            st.header('AnÃ¡lise exploratÃ³ria')
                            st.subheader('GrÃ¡fico boxplot')


                            Eixo_y = data.columns[2]
                            print(Eixo_y)
                            Axis_x = data.columns[0]

                            dentro_1 = data.columns[1]
                            #colocando grÃ¡fico um ao lado do outro
                            col1, col2 = st.columns(2)

                            with col1:
                                fig, ax = plt.subplots(figsize=(10, 6))
                                sns.boxplot(x=Axis_x, y=Eixo_y, hue=dentro_1, palette="Set2", data=data, ax=ax)
                                sns.despine(offset=10, trim=True)
                                st.pyplot(fig)

                            with col2:

                                st.subheader('GrÃ¡fico de barras')
                                fig3, ax = plt.subplots(figsize=(10, 6))
                                sns.barplot(x=Axis_x, y=Eixo_y, hue=dentro_1, palette="Set2",errorbar = 'sd', width = 0.5, data=data, ax=ax)
                                plt.ylim(0)
                                #sns.despine(offset=10, trim=True)
                                st.pyplot(fig3)



                            escolha_6 = st.radio('VocÃª gostaria de alterar o grÃ¡fico ?', ['Sim', 'NÃ£o '])
                            if escolha_6 ==  'NÃ£o ':
                                st.warning('Escolha sim para prosseguir com  a anÃ¡lise dos fatores ')

                            else:

                                escolha_7 = st.radio( f"VocÃª gostaria de alterar o nÃ­vel da variÃ¡vel categÃ³rica: {categorica}?",['Sim', 'NÃ£o'])
                                if escolha_7 == 'Sim':
                                    data_grouped = data[categorica].unique()
                                    lista = list(data_grouped)
                                    tamanho = len(lista)
                                    ordem_desejada = []
                                    for k in range(tamanho):
                                        selecionado = st.selectbox(f'Escolha a ordem do nÃ­vel {1 + k} ',
                                                                   ['Selecione'] + lista,
                                                                   key=f'ordem1_{20 + k}')
                                        ordem_desejada.append(selecionado)

                                        # Verifica se todos os nÃ­veis foram selecionados corretamente
                                        if 'Selecione' not in ordem_desejada and len(set(ordem_desejada)) == len(lista):







    #escolha_8
                                            escolha_8 = st.radio(f"VocÃª gostaria de alterar os nÃ­veis da variÃ¡vel categÃ³rica:{categorica_2}", ['Sim', 'NÃ£o'])
                                            if escolha_8 ==  'Sim':
                                                data_grouped = data[categorica_2].unique()

                                                lista = list(data_grouped)
                                                tamanho = len(lista)

                                                ordem_desejada2 = []
                                                for k in range(tamanho):
                                                    selecionado = st.selectbox(f'Escolha a ordem do nÃ­vel {1 + k} ',
                                                                               ['Selecione'] + lista,
                                                                               key=f'ordem2_{30 + k}')
                                                    ordem_desejada2.append(selecionado)

                                                    # Verifica se todos os nÃ­veis foram selecionados corretamente

                                                if 'Selecione' not in ordem_desejada and len(set(ordem_desejada2)) == len(lista):

                                                    #cores:
                                                    options = ["Blues", "BuGn", "Set1", "Set2", "Set3", "viridis",
                                                               "magma", "Pastel1", "Pastel2", "colorblind", "Accent",
                                                               "tab10", "tab20", "tab20b", 'tab20c', "Paired"]

                                                    cor_padrÃ£o = "Set2"
                                                    cores = st.selectbox('Escolha a cor de interesse:',
                                                                         ['Cores'] + options, index=0)
                                                    st.success(f"VocÃª escolheu: {cores}.")
                                                    if cores == 'Cores':
                                                        cores = cor_padrÃ£o

                                                    #Criar um slider somente para valores mÃ¡ximos:
                                                    max_valor = data[continua].max()
                                                    valor_inicial = max_valor  # arredonda para o prÃ³ximo inteiro


                                                    ymax = st.number_input(
                                                        label="Valor mÃ¡ximo do eixo Y",
                                                        min_value=0.00,
                                                        max_value=1000000.00,
                                                        value=valor_inicial,
                                                        step=0.01
                                                    )

                                                    nome_eixo_y = st.text_input("Digite o nome que vocÃª quer para o eixo Y:",
                                                                                value=Eixo_y)
                                                    nome_eixo_x = st.text_input("Digite o nome que vocÃª quer para o eixo X:", value = Axis_x)
                                                    font_opcao = ["serif", "sans-serif", "monospace", "Arial",
                                                                  "Helvetica", "Verdana", "Tahoma", "Calibri",
                                                                  "DejaVu Sans", "Geneva", "Roboto", "Times New Roman",
                                                                  "Georgia", "Garamond", "Cambria", "DejaVu Serif",
                                                                  "Computer Modern"]

                                                    font2 = st.selectbox('Escolha a fonte dos eixos e rÃ³tulos',
                                                                         font_opcao, key='88')

                                                    with st.spinner("Por favor, aguarde..."):
                                                        st.subheader(f"GrÃ¡fico de interaÃ§Ã£o  {categorica} e {categorica_2}")
                                                        fig, ax = plt.subplots(figsize=(14, 8))
                                                        sns.boxplot(x=Axis_x, y=Eixo_y, hue=dentro_1,order=ordem_desejada,hue_order= ordem_desejada2, palette=cores, data=data, ax=ax)
                                                        fig.canvas.draw()  # <-- garante que os rÃ³tulos foram desenhados

                                                        # ðŸ”µ Colorir rÃ³tulos do eixo X (ex: "Lunch", "Dinner")
                                                        ax.set_xticklabels(ax.get_xticklabels(), color='black')

                                                        # ðŸ”´ Colorir rÃ³tulos do eixo Y (nÃºmeros do lado esquerdo)
                                                        ax.tick_params(axis='y', colors='black')

                                                        # ðŸŸ¢ Colorir nÃºmeros do eixo X (embaixo da barra)
                                                        ax.tick_params(axis='x', colors='black')

                                                        ax.set_ylim(0, ymax)
                                                        ax.set_ylabel(nome_eixo_y, fontsize=16, weight='bold')
                                                        ax.set_xlabel(nome_eixo_x, fontsize=16, weight='bold')
                                                        sns.despine(offset=10, trim=True)

                                                        st.pyplot(fig)




                                                    # Salvar a figura em um arquivo PNG
                                                    fig.savefig(f"GrÃ¡fico de interaÃ§Ã£o {categorica} e {categorica_2}.png",dpi=300,  bbox_inches='tight')  # Salva a figura como .png

                                                    # Cria um botÃ£o para download
                                                    with open(f"GrÃ¡fico de interaÃ§Ã£o {categorica} e {categorica_2}.png", "rb") as f:
                                                        st.download_button(
                                                            label="Baixar o grÃ¡fico",  # Nome do botÃ£o
                                                            data=f,  # Dados do arquivo
                                                            file_name=f"GrÃ¡fico de interaÃ§Ã£o {categorica} e {categorica_2}.png",  # Nome do arquivo a ser baixado
                                                            mime="image/png"  # Tipo MIME do arquiv
                                                        )


                                                        #grrÃ¡fico de barras e download
                                                        st.subheader(f'GrÃ¡fico de barras interaÃ§Ã£o {categorica} e {categorica_2}')
                                                        fig2, ax = plt.subplots(figsize=(14, 8))
                                                        sns.barplot(x=Axis_x, y=Eixo_y, hue=dentro_1, order=ordem_desejada,
                                                                    hue_order=ordem_desejada2, palette= cores,linewidth = 1, edgecolor = 'black', data=data,width = 0.5,  ax=ax,
                                                                    errorbar='sd')

                                                        ax.set_ylim(0, ymax)#ax.spines['left'].set_linewidth(3)
                                                        cor = 'black'
                                                        tom = 'bold'
                                                        ax.spines['left'].set_linewidth(1)
                                                        ax.spines['left'].set_color(cor)
                                                        ax.tick_params(axis = 'y', labelsize = 17, colors = cor )
                                                        #ax.tick_params(axis = 'y', colors = cor )# cor do eixo y


                                                        ax.set_xticklabels(ax.get_xticklabels(), fontsize=18, fontweight='bold', fontfamily = font2)
                                                        ax.set_ylabel(nome_eixo_y, fontsize=18, weight='bold', family = font2)
                                                        ax.set_xlabel(nome_eixo_x, fontsize=18, weight='bold', family = font2)
                                                        plt.legend(title = categorica_2, frameon=False, prop={'weight': 'bold','size': 15,'family': font2},title_fontproperties={'weight': 'bold','size': 16,'family': font2})
                                                        plt.ylim(0)
                                                        st.pyplot(fig2)

                                                        # Salvar a figura em um arquivo PNG
                                                        fig2.savefig(f"GrÃ¡fico de interaÃ§Ã£o barras {categorica} e {categorica_2}.png", dpi=300,
                                                                    bbox_inches='tight')  # Salva a figura como .png

                                                        # Cria um botÃ£o para download
                                                        with open(f"GrÃ¡fico de interaÃ§Ã£o barras {categorica} e {categorica_2}.png", "rb") as f:
                                                            st.download_button(
                                                                label="Baixar o grÃ¡fico",  # Nome do botÃ£o
                                                                data=f,  # Dados do arquivo
                                                                file_name=f"GrÃ¡fico de interaÃ§Ã£o barras {categorica} e {categorica_2}.png",
                                                                # Nome do arquivo a ser baixado
                                                                mime="image/png"  # Tipo MIME do arquivo

                                                            )
                                                        data_grouped = data.groupby([categorica, categorica_2])[
                                                            continua].describe().reset_index()
                                                        st.subheader(
                                                            f'AnÃ¡lise das mÃ©dias para a interaÃ§Ã£o dos fatores  {categorica} e {categorica_2}')
                                                        st.dataframe(data_grouped)


                                                    escolha_10 = st.radio('VocÃª gostaria de ver os grÃ¡fico sem interaÃ§Ã£o?',['Sim', 'NÃ£o'])
                                                    if escolha_10 == 'Sim':
                                                        st.subheader(f'GrÃ¡fico {categorica_2} ')
                                                        fig51, ax = plt.subplots(figsize=(14, 8))
                                                        sns.boxplot( y=Eixo_y, hue=dentro_1,
                                                                    hue_order=ordem_desejada2, palette=cores,  data=data, ax=ax)
                                                        ax.set_ylabel(nome_eixo_y, fontsize=14, weight='bold')
                                                        sns.despine(offset=10, trim=True)
                                                        st.pyplot(fig51)

                                                        fig51.savefig(f"GrÃ¡fico {categorica_2}.png",dpi=300,
                                                                    bbox_inches='tight')  # Sem espaÃ§o antes de .png

                                                        with open(f"GrÃ¡fico {categorica_2}.png", "rb") as f:
                                                            st.download_button(
                                                                label="Baixar o grÃ¡fico",
                                                                data=f,
                                                                file_name=f"GrÃ¡fico {categorica_2}.png",
                                                                mime="image/png"

                                                            )



                                                            #grÃ¡fico de barras:
                                                            st.subheader(f'GrÃ¡fico {categorica_2} ')
                                                            fig8, ax = plt.subplots(figsize=(14, 8))
                                                            sns.barplot (y=Eixo_y, hue=dentro_1,
                                                                        hue_order=ordem_desejada2, palette=cores, linewidth = 1, edgecolor = 'black',width = 0.4, data=data, ax=ax)
                                                            ax.set_ylabel(nome_eixo_y, fontsize=14, weight='bold')
                                                            ax.set_ylim(0, ymax)  # ax.spines['left'].set_linewidth(3)
                                                            cor = 'black'
                                                            tom = 'bold'
                                                            ax.spines['left'].set_linewidth(1)
                                                            ax.spines['left'].set_color(cor)
                                                            ax.tick_params(axis='y', labelsize=17, colors=cor)
                                                            # ax.tick_params(axis = 'y', colors = cor )# cor do eixo y

                                                            ax.set_xticklabels(ax.get_xticklabels(), fontsize=18,
                                                                               fontweight='bold', fontfamily=font2)
                                                            ax.set_ylabel(nome_eixo_y, fontsize=18, weight='bold',
                                                                          family=font2)
                                                            ax.set_xlabel(nome_eixo_x, fontsize=18, weight='bold',
                                                                          family=font2)

                                                            plt.ylim(0)
                                                            st.pyplot(fig8)

                                                            fig8.savefig(f"GrÃ¡fico de barras {categorica_2}.png", dpi=300,
                                                                        bbox_inches='tight')  # Sem espaÃ§o antes de .png

                                                            with open(f"GrÃ¡fico de barras {categorica_2}.png", "rb") as f:
                                                                st.download_button(
                                                                    label="Baixar o grÃ¡fico",
                                                                    data=f,
                                                                    file_name=f"GrÃ¡fico de barras {categorica_2}.png",
                                                                    mime="image/png"

                                                                )

                                                                data_grouped2 = data.groupby(categorica_2)[continua].describe().reset_index()

                                                                st.subheader(f'AnÃ¡lise das mÃ©dias para o fator {categorica_2}')
                                                                st.dataframe(data_grouped2)






                                                        st.subheader(f"GrÃ¡fico {categorica}")

                                                        fig50, ax = plt.subplots(figsize=(14, 8))
                                                        sns.boxplot(x=Axis_x, y=Eixo_y, order=ordem_desejada,
                                                                    palette= cores, data=data, ax=ax)
                                                        ax.set_ylabel(nome_eixo_y, fontsize=14, weight='bold')
                                                        ax.set_xlabel(nome_eixo_x, fontsize=14, weight='bold')
                                                        ax.set_ylim(0, ymax)  # ax.spines['left'].set_linewidth(3)
                                                        cor = 'black'
                                                        tom = 'bold'
                                                        ax.spines['left'].set_linewidth(1)
                                                        ax.spines['left'].set_color(cor)
                                                        ax.tick_params(axis='y', labelsize=17, colors=cor)
                                                        # ax.tick_params(axis = 'y', colors = cor )# cor do eixo y

                                                        ax.set_xticklabels(ax.get_xticklabels(), fontsize=18,
                                                                           fontweight='bold', fontfamily= font2)
                                                        ax.set_ylabel(nome_eixo_y, fontsize=18, weight='bold',
                                                                      family=font2)
                                                        ax.set_xlabel(nome_eixo_x, fontsize=18, weight='bold',
                                                                      family= font2)

                                                        plt.ylim(0)
                                                        st.pyplot(fig50)

                                                        # Salvar a figura com nome seguro
                                                        fig50.savefig(f"GrÃ¡fico {categorica}.png", dpi=300,bbox_inches='tight')

                                                        # BotÃ£o de download
                                                        with open(f"GrÃ¡fico {categorica}.png", "rb") as f:
                                                            st.download_button(
                                                                label="Baixar o grÃ¡fico",
                                                                data=f,
                                                                file_name=f"GrÃ¡fico {categorica}.png",
                                                                mime="image/png"
                                                            )



                                                            #grÃ¡fico de barras:

                                                            st.subheader(f"GrÃ¡fico de barras {categorica}")

                                                            fig11, ax = plt.subplots(figsize=(14, 8))
                                                            sns.barplot(x=Axis_x, y=Eixo_y, order=ordem_desejada,
                                                                        palette=cores,linewidth = 1, edgecolor = 'black',width = 0.4, data=data, ax=ax)
                                                            ax.set_ylabel(nome_eixo_y, fontsize=14, weight='bold')
                                                            ax.set_xlabel(nome_eixo_x, fontsize=14, weight='bold')
                                                            ax.set_ylim(0, ymax)  # ax.spines['left'].set_linewidth(3)
                                                            cor = 'black'
                                                            tom = 'bold'
                                                            ax.spines['left'].set_linewidth(1)
                                                            ax.spines['left'].set_color(cor)
                                                            ax.tick_params(axis='y', labelsize=17, colors=cor)
                                                            # ax.tick_params(axis = 'y', colors = cor )# cor do eixo y

                                                            ax.set_xticklabels(ax.get_xticklabels(), fontsize=18,
                                                                               fontweight='bold', fontfamily=font2)
                                                            ax.set_ylabel(nome_eixo_y, fontsize=18, weight='bold',
                                                                          family=font2)
                                                            ax.set_xlabel(nome_eixo_x, fontsize=18, weight='bold',
                                                                          family=font2)

                                                            plt.ylim(0)
                                                            st.pyplot(fig11)


                                                            # Salvar a figura com nome seguro
                                                            fig11.savefig(f"GrÃ¡fico barras2 {categorica}.png", dpi=300, bbox_inches='tight')

                                                            # BotÃ£o de download
                                                            with open(f"GrÃ¡fico barras2 {categorica}.png", "rb") as f:
                                                                st.download_button(
                                                                    label="Baixar o grÃ¡fico",
                                                                    data=f,
                                                                    file_name=f"GrÃ¡fico barras2 {categorica}.png",
                                                                    mime="image/png"
                                                                )

                                                            data_grouped1 = data.groupby(categorica)[continua].describe().reset_index()

                                                            st.subheader(f'AnÃ¡lise das mÃ©dias para o fator {categorica}')
                                                            st.dataframe(data_grouped1)

                                                            anova_data = st.radio('VocÃª quer prosseguir com a ANOVA?',['Sim', 'NÃ£o'])
                                                            if anova_data =='NÃ£o':
                                                                st.success('A sua anÃ¡lise acaba por aqui')
                                                            else:
                                                                st.success('Prossiga na terceira aba')

                                                                with tab3:
                                                                    st.header(f"Pressupostos da ANOVA ")
                                                                    st.write(f'Modelo completo: {categorica}:{categorica_2}')
                                                                    st.write(f"ParÃ¢metro: {continua}")
                                                                    st.subheader('Teste de normalidade de Shapiro Wilk')
                                                                    st.write('H0: Os resÃ­duos seguem uma distribuiÃ§Ã£o normal ')
                                                                    st.write('Se P < 0.05, entÃ£o rejeita H0 : O resÃ­duos nÃ£o segue uma distribuiÃ§Ã£o normal ')



                                                                    formula = f'{continua}~{categorica_2}*{categorica}'
                                                                    # print(formula)
                                                                    # modelo
                                                                    model = smf.ols(formula, data= data).fit()
                                                                    df_resid = data.copy()
                                                                    df_resid['Residuos2'] = model.resid
                                                                    stat, p_valor = shapiro(df_resid['Residuos2'])
                                                                    if p_valor > 0.05:
                                                                        reject = 'NÃ£o rejeita a H0'
                                                                        decisao= 'Os resÃ­duos  seguem uma distribuiÃ§Ã£o  normal '
                                                                        st.success(f' P-valor =  {p_valor}')
                                                                        st.success(f'DecisÃ£o {reject}')
                                                                        st.success(decisao )
                                                                    else:
                                                                        reject = 'Rejeita H0 '
                                                                        decisao = 'Os resÃ­duos nÃ£o  seguem uma distribuiÃ§Ã£o  normal '
                                                                        st.success(f' P-valor =  {p_valor}')
                                                                        st.success(f'DecisÃ£o {reject}')
                                                                        st.success(decisao)
                                                                    st.subheader('Curva de distribuiÃ§Ã£o KDE')
                                                                    # plotar a curva de KDE
                                                                    fig5, ax = plt.subplots()
                                                                    sns.kdeplot(data=df_resid, x= 'Residuos2', fill=True, alpha=0.3)
                                                                    ax.set_title(f"Curva de KDE para visualizaÃ§Ã£o de normalidade do modelo {categorica}-{categorica_2}")
                                                                    plt.axvline(0, color='red', linestyle='dashed', linewidth=1)  # Linha central em 0
                                                                    # sns.stripplot(x=zscore, color='black', jitter=True, alpha=0.5, ax=ax)
                                                                    st.pyplot(fig5)

                                                                    # Anderson Darling test
                                                                    # Teste de normalidade de Anderson darling


                                                                    st.header("Teste de Normalidade dos resÃ­duos ")
                                                                    st.subheader('Anderson Darling ')
                                                                    st.write(f'H0: Os resÃ­duos do modelo: {categorica}-{categorica_2} seguem distribuiÃ§Ã£o normal ')
                                                                    st.write('H0: Se valor crÃ­tico > valor estatÃ­stico, entÃ£o nÃ£o rejeita H0')
                                                                    test = anderson(df_resid['Residuos2'], dist='norm')
                                                                    critical_value = test.critical_values[2]  # O valor crÃ­tico para o nÃ­vel de 5%

                                                                    if test.statistic > critical_value:
                                                                        reject2 = 'Rejeita H0'
                                                                        resultado = "Os resÃ­duos nÃ£o seguem uma distribuiÃ§Ã£o normal "
                                                                    else:
                                                                        reject2 = 'NÃ£o rejeita H0'
                                                                        resultado = 'Os resÃ­duos seguem uma distribuiÃ§Ã£o normal '

                                                                    # Exibindo os resultados
                                                                    print(linha)
                                                                    st.success(f' Valor crÃ­tico: {critical_value} ')
                                                                    st.success(f'EstatÃ­stica do teste:  {test.statistic}')
                                                                    st.success(reject2)
                                                                    st.success(resultado)

                                                                    #Homogneidade da variÃ¢ncia:
                                                                    st.header('Homogeneidade de variÃ¢ncia')
                                                                    st.subheader("Teste de levene")
                                                                    st.write('H0: A variÃ£ncia dos grupos comparados sÃ£o iguais a um nÃ­vel de significÃ¢ncia de 5%')
                                                                    st.write('Se p-valor <0.05, entÃ£o rejeita H0 e os resÃ­duos nÃ£o seguem distribuiÃ§Ã£o normal')
                                                                    agrupamento = df_resid.groupby(categorica)
                                                                    grupo = []
                                                                    for nome, dados_grupo in agrupamento:
                                                                        # print(dados_grupo['Residuos'].values)
                                                                        grupo.append(dados_grupo['Residuos2'].values)
                                                                        # print(x)
                                                                    stat, p_value = stats.levene(*grupo)
                                                                    if p_value < 0.05:
                                                                        reject = 'Rejeita a H0'
                                                                        homoge_neo = 'nÃ£o sÃ£o '
                                                                        resposta = 'Os resÃ­duos nÃ£o seguem uma distribuiÃ§Ã£o normal'
                                                                    else:
                                                                        reject = 'NÃ£o rejeita H0'
                                                                        homoge_neo = 'sÃ£o '
                                                                        resposta = 'Os resÃ­duos seguem uma distribuiÃ§Ã£o normal '
                                                                    st.success(
                                                                        f' P-valor :  {p_value}' )
                                                                    st.success(f"A variÃ¢ncia dos nÃ­veis comparados {homoge_neo} homogÃªneos")
                                                                    st.success(f'DecisÃ£o:  {reject} ')
                                                                    st.success(resposta)




                                                                    #teste de barlett
                                                                    st.subheader('Teste de barlett para homogeneidade de variÃ¢ncia')
                                                                    st.write('H0: A variÃ£ncia dos grupos comparados sÃ£o iguais a um nÃ­vel de significÃ¢ncia de 5%')
                                                                    st.write('Se p-valor <0.05, entÃ£o rejeita H0 e os resÃ­duos nÃ£o seguem distribuiÃ§Ã£o normal')
                                                                    stat, p = stats.bartlett(*grupo)
                                                                    if p_value < 0.05:
                                                                        reject = 'Rejeita a H0'
                                                                        homoge_neo = 'nÃ£o sÃ£o '
                                                                        decisao = 'Os resÃ­duos nÃ£o sÃ£o homogÃªnos(iguais)'
                                                                    else:
                                                                        reject = 'NÃ£o rejeita H0'
                                                                        homoge_neo = 'sÃ£o '
                                                                        decisao = ' As variÃ¢ncias dos resÃ­duos sÃ£o homogÃªneos '

                                                                    st.success(f'P-valor :  {p_value}')
                                                                    st.success(f'a variÃ¢ncia dos nÃ­veis comparados {homoge_neo} homogÃªneos')
                                                                    st.success(reject)
                                                                    st.success(decisao)
                                                                    st.subheader('IndependÃªncia dos resÃ­duos:')
                                                                    st.write('H0: Os resÃ­duos nÃ£o sÃ£o independentes(NÃ£o hÃ¡ correlaÃ§Ã£o )')
                                                                    st.write('HA: Os resÃ­duos sÃ£o dependentes(HÃ¡ correlaÃ§Ã£o)')
                                                                    st.write('Se p<0.05, entÃ£o rejeita H0: os resÃ­duos sÃ£o autocorrelacionados')

                                                                    # Teste de Ljung-Box
                                                                    lb_test = acorr_ljungbox(model.resid, lags=[1],
                                                                                             return_df=True)  # lags=[1] testa apenas para defasagem 1

                                                                    st.dataframe(lb_test)
                                                                    p_valor = lb_test['lb_pvalue'].values[0]

                                                                    if p_valor >= 0.05:
                                                                        st.success('Os resÃ­duos nÃ£o sÃ£o  dependentes (NÃ£o hÃ¡ autocorrelaÃ§Ã£o)')
                                                                        st.success(p_valor)
                                                                    else:
                                                                        st.warning('Os resÃ­duos sÃ£o dependentes (HÃ¡ alta correlaÃ§Ã£o)')
                                                                        st.warning(f'p-valor = {p_valor}')

                                                                    st.header('ANOVA')
                                                                    model1 = smf.ols(formula, data=data).fit()
                                                                    anova_table = anova_lm(model1)
                                                                    st.dataframe(anova_table)
                                                                    data_grouped = data.groupby([categorica, categorica_2])[continua].mean().reset_index()
                                                                    st.subheader(f'AnÃ¡lise das mÃ©dias para a interaÃ§Ã£o dos fatores  {categorica} e {categorica_2}')
                                                                    st.dataframe(data_grouped)
                                                                    st.write(f"R squared adjusted: {model.rsquared_adj}")
                                                                    p_value = anova_table['PR(>F)'][2]

                                                                    if p_value < 0.05:
                                                                        print(f'AnÃ¡lise de tukey para o moddelo {categorica}: {categorica_2}')
                                                                        df_clean2 = data.copy()
                                                                        df_clean2['CombinaÃ§Ã£o'] = df_clean2[categorica].astype(str) + ':' + df_clean2[
                                                                            categorica_2].astype(str)
                                                                        # Garantindo que a coluna CombinaÃ§Ã£o seja categÃ³rica
                                                                        df_clean2['CombinaÃ§Ã£o'] = pd.Categorical(df_clean2['CombinaÃ§Ã£o'])

                                                                        mc = MultiComparison(df_clean2.iloc[:, 2], df_clean2['CombinaÃ§Ã£o'])
                                                                        tukey_test = mc.tukeyhsd(alpha=0.05)
                                                                        st.dataframe(tukey_test.summary())
                                                                        #grÃ¡fico
                                                                        st.pyplot(fig2)

                                                                    else:
                                                                        st.warning('O testde tukey nÃ£o pode ser mostrado, pois nÃ£o houve um p-valor significativo na interaÃ§Ã£o')
                                                                        st.warning(f'O p-valor foi de {p_value}')
                                                                        st.warning('Que estÃ¡ acima de 0.05')
                                                                        anova2 = st.radio('VocÃª deseja fazer a anÃ¡lise dos fatores isolados?', ['Sim','NÃ£o'])

                                                                        if anova2 == 'Sim':
                                                                            st.header('AnÃ¡lise dos fatores isolados')
                                                                            st.subheader(f'Modelo: {categorica} +{categorica_2}')
                                                                            formula = f'{continua}~{categorica}+{categorica_2}'
                                                                            model = smf.ols(formula, data=data).fit()
                                                                            anova_table1 = anova_lm(model)
                                                                            st.dataframe(anova_table1)
                                                                            st.write(f"R squared adjusted: {model.rsquared_adj}")
                                                                            p_value1 = anova_table['PR(>F)'][1]
                                                                            p_value2 = anova_table['PR(>F)'][0]
                                                                            data_grouped1 = data.groupby(categorica)[continua].mean().reset_index()

                                                                            st.subheader(f'AnÃ¡lise das mÃ©dias para o fator {categorica}')
                                                                            st.dataframe(data_grouped1)
                                                                            data_grouped2 = data.groupby(categorica_2)[continua].mean().reset_index()

                                                                            st.subheader(f'AnÃ¡lise das mÃ©dias para o fator {categorica_2}')
                                                                            st.dataframe(data_grouped2)
                                                                            if p_value1 < 0.05:
                                                                                st.subheader(f'AnÃ¡lise de tukey para  o fator   {categorica}')

                                                                                categorico1 = pd.Categorical(data.iloc[:,0]
                                                                                   )  # transformando a primeira coluna em categÃ³rica

                                                                                mc = MultiComparison(data.iloc[:, 2], categorico1)
                                                                                tukey_test1 = mc.tukeyhsd(alpha=0.05)
                                                                                st.dataframe(tukey_test1.summary())
                                                                                col2, col3 = st.columns(2)
                                                                                with col2:
                                                                                    st.pyplot(fig11)
                                                                                with col3:
                                                                                    st.pyplot(fig50)

                                                                                data_grouped = data.groupby([categorica, categorica_2])[continua].mean().reset_index()


                                                                            else:
                                                                                st.warning(f'O valor de p para o fator {categorica} nÃ£o foi significativo')
                                                                                st.warning(p_value1)
                                                                                st.warning('NÃ£o prossegue a anÃ¡lise de contraste')

                                                                            if p_value2< 0.05:

                                                                                st.subheader(f'AnÃ¡lise de tukey para  o fator  {categorica_2}')
                                                                                categorico2 = pd.Categorical(data.iloc[:,1]
                                                                                   )  # transforma a segunda coluna em categÃ³rica

                                                                                mc2= MultiComparison(data.iloc[:, 2], categorico2)
                                                                                tukey_test2 = mc2.tukeyhsd(alpha=0.05)
                                                                                st.dataframe(tukey_test2.summary())
                                                                                cols = st.columns(2)  # Cria 3 colunas
                                                                                  # Pega a primeira coluna
                                                                                col2 = cols[0]
                                                                                col3 = cols[1]

                                                                                with col2:
                                                                                    st.pyplot(fig8)
                                                                                with col3:
                                                                                    st.pyplot(fig51)


                                                                            else:
                                                                                st.warning(f'O valor de p para o fator {categorica_2} nÃ£o foi significativo')
                                                                                st.warning(p_value2)
                                                                                st.warning('NÃ£o prossegue a anÃ¡lise de contraste')

        escolhas = []
        if variavel == 3:
            categorica= st.selectbox('Escolha as variÃ¡vel categÃ³rica',['Selecione'] + chaves1,key = '6')
            if categorica != 'Selecione':
                st.success(f"VocÃª escolheu a variÃ¡vel categÃ³rica: {categorica}")
            categorica_2 = st.selectbox('Escolha as variÃ¡vel categÃ³rica', ['Selecione'] + chaves1, key = '7')
            if categorica_2 != 'Selecione':
                st.success(f"VocÃª escolheu a variÃ¡vel categÃ³rica: {categorica_2}")
            categorica_3 = st.selectbox('Escolha as variÃ¡vel categÃ³rica', ['Selecione'] +chaves1, key='8')
            if categorica_3 != 'Selecione':
                st.success(f"VocÃª escolheu a variÃ¡vel categÃ³rica: {categorica_3}")
            continua = st.selectbox('Escolha a variÃ¡vel contÃ­nua', ['Selecione'] +chaves1, key = '9')
            if continua  != 'Selecione':
                st.success(f"VocÃª escolheu a variÃ¡vel contÃ­nua: {continua}")

            if categorica != 'Selecione' and  categorica_2 != 'Selecione' and categorica_3  and continua  != 'Selecione':

                escolhas.append(categorica)
                escolhas.append(categorica_2)
                escolhas.append(categorica_3)
                escolhas.append(continua)

                data = data[escolhas]  # escolhi e armazenei as variÃ¡veis que quero trabalhar
                st.write(data)
                data_na = data.isna().sum()
                # fazer uma funÃ§Ã£o aqui! def retirarana(data na , data) e chamo novamente em outro lugar
                if data_na.sum() == 0:
                    st.write(f'VocÃª NÃ£o tem **NA** nas  variÃ¡veis de seus dados  ')
                    st.dataframe(data_na)
                else:
                    st.write(f'VocÃª  tem **NA** nas  variÃ¡veis de seus dados  ')
                    st.dataframe(data_na)
                    st.write('VocÃª gostaria de retira  as **NAs** ou substituir por valores mÃ©dios?')
                    escolha_2 = st.radio("VocÃª deseja ?", ["Substituir por Valores mÃ©dios", "Retirar Na"])
                    if escolha_2 == "Substituir por Valores mÃ©dios":
                        data = data.fillna(data.median(numeric_only=True))
                        st.write('Dados com valores mÃ©dios substituidos no lugar de NA')
                        st.dataframe(data)
                    else:
                        data = data.dropna(axis=1)
                        st.dataframe(data)  # manter o mes



                cv = data.loc[:, continua].values  # transforma em array numpy  e pega os valores, para o cÃ¡lculo
                # cÃ¡lculo do cv
                cv2 = np.std(cv) / np.mean(cv) * 100
                st.write(f"CV% = {cv2}")

                st.subheader('Z-score ')
                zscore = (data[continua] - np.mean(data[continua])) / np.std(data[continua])
                data2 = data.copy()
                data2['zscore'] = zscore
                st.write(data2)
                # print(zscore)

                # plotar a curva de KDE
                fig2, ax = plt.subplots()
                sns.kdeplot(data=data2, x='zscore', fill=True, alpha=0.3)
                ax.set_title("Curva de KDE para visualizaÃ§Ã£o de normalidade ")
                plt.axvline(0, color='red', linestyle='dashed', linewidth=1)  # Linha central em 0
                # sns.stripplot(x=zscore, color='black', jitter=True, alpha=0.5, ax=ax)
                st.pyplot(fig2)

                # Plotar o boxplot dos z-scores
                fig, ax = plt.subplots()
                sns.boxplot(x=zscore, ax=ax)
                sns.stripplot(x=zscore, color='black', jitter=True, alpha=0.5, ax=ax)
                ax.set_title("Boxplot dos Z-Scores")
                st.pyplot(fig)

                # cÃ¡lculo de outliers:
                st.subheader('Outlier ')
                st.write(
                    'O cÃ¡lculo de outlier consiste em identificar os dados que estÃ£o acima ou abaixo  de 3 desvios padrÃ£o do Z-score e utiliza-se o mÃ©todo do IQR')

                Q1 = data.loc[:, continua].quantile(0.25)
                Q3 = data.loc[:, continua].quantile(0.75)
                # print(Q1)
                # print(Q3)

                IQR = Q3 - Q1
                LS = Q3 + 1.5 * IQR
                LI = Q1 - 1.5 * IQR
                print()
                linha = 70 * '='
                print(linha)

                print(linha)

                # Outliers acima e abaixo:
                st.write('Limite superior = ', LS)
                acima = data[(data.loc[:, continua] > LS)]
                if acima.empty:  # Usa-se empty, porque estamos tratando de um dataframe
                    st.write('VocÃª nÃ£o tem outliers acima do limite superior  ')
                    st.write(acima)
                else:
                    st.write('VocÃª tem alguns outliers acima do limite superior')
                    st.write(acima)

                st.write("limite inferior = ", LI)
                abaixo = data[(data.loc[:, continua] < LI)]
                if abaixo.empty:  # Usa-se empty, porque estamos tratando de um dataframe
                    st.write('VocÃª nÃ£o tem outliers abaixo do limite inferior  ')
                    st.write(abaixo)
                else:
                    st.write('VocÃª tem alguns outliers abaixo  do limite inferior')
                    st.write(abaixo)

                escolha_3 = st.radio("VocÃª deseja retirar os outliers ?", ["SIM", "NÃ£o "], horizontal=True)
                if escolha_3 == 'SIM':
                    data = data[(data[continua] < LS) & (data[continua] > LI)]
                    st.success('os outliers foram tirados com sucesso ')
                    escolha_4 = st.radio("VocÃª gostaria de ver os dados sem outliers?", ['Sim', 'NÃ£o'])
                    if escolha_4 == 'Sim':
                        st.write('Seus dados sem outliers')
                        st.dataframe(data)
                    escolha_5 = st.radio('VocÃª deseja ver os grÃ¡ficos boxplot e KDE', ['Sim', 'NÃ£o'], horizontal=True)
                    if escolha_5 == 'Sim':
                        st.subheader('Z-score ')
                        zscore = (data[continua] - np.mean(data[continua])) / np.std(data[continua])
                        data['zscore'] = zscore

                        # plotar a curva de KDE
                        fig2, ax = plt.subplots()
                        sns.kdeplot(data=data, x='zscore', fill=True, alpha=0.3)
                        ax.set_title("Curva de KDE para visualizaÃ§Ã£o de normalidade ")
                        plt.axvline(0, color='red', linestyle='dashed', linewidth=1)  # Linha central em 0
                        # sns.stripplot(x=zscore, color='black', jitter=True, alpha=0.5, ax=ax)
                        st.pyplot(fig2)

                        st.dataframe(data)
                        # Plotar o boxplot dos z-scores
                        fig, ax = plt.subplots()
                        sns.boxplot(x=zscore, ax=ax)
                        sns.stripplot(x=zscore, color='black', jitter=True, alpha=0.5, ax=ax)
                        ax.set_title("Boxplot dos Z-Scores")
                        st.pyplot(fig)

                        st.write('AnÃ¡lise descritiva dos seus dados ')
                        data_grouped = data.groupby(data.columns[0:variavel].tolist()).describe()
                        st.dataframe(data_grouped)

        else:
                st.warning('VocÃª nÃ£o selecionou as suas variÃ¡veis, meu caro!!"')

                        #with tab2:
























